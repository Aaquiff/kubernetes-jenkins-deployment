image: 'aaquiff/jenkins-docker-kube:latest'
wso2Username: <WSO2_SUBSCRIPTION_USERNAME>
wso2Password: <WSO2_SUBSCRIPTION_PASSWORD>

# Admin credentials of jenkins instance to be created
jenkins:
  username: admin
  password: admin

registry:
  server: 'https://index.docker.io/v1/'
  username: <REGISTRY_USERNAME>
  password: <REGISTRY_PASSWORD>
  email: <REGISTRY_EMAIL>
  address: index.docker.io

github:
  username: <GITHUB_USERNAME>
  password: <GITHUB_PASSWORD>

applications:
  - name: wso2is
    email: <EMAIL>
    testScript:
      path: tests
      command: test.sh
    chart:
      customChart: false
      name: is-pattern-1
      version: 5.8.0-1
      repo: 'https://github.com/wso2/sample-is-chart'
    images:
      - organization: aaquiff
        repository: wso2is
        # customImage:
        #   baseImage: 'docker.wso2.com/wso2is:5.8.0'
        #   dockerfileGitRepo: 'https://github.com/Aaquiff/docker-is'


# Values for Spinnaker chart
spinnaker:
  dockerRegistries:
    - name: dockerhub
      address: index.docker.io
      username: <REGISTRY_USERNAME>
      password: <REGISTRY_PASSWORD>
      email: <REGISTRY_EMAIL>
      repositories:
        - aaquiff/wso2is
        - aaquiff/wso2ei
  halyard:
    spinnakerVersion: 1.15.2
    # image:
    #   tag: 1.20.2
    additionalScripts:
      create: true
      data:
        enable_ci.sh: |-
          echo "Configuring jenkins master"
          USERNAME="admin"
          PASSWORD="admin"
          $HAL_COMMAND config ci jenkins enable
          echo $PASSWORD | $HAL_COMMAND config ci jenkins master edit master --address http://jenkins-service.{{ .Release.Namespace }}.svc.cluster.local:8080 --username $USERNAME --password || echo $PASSWORD | $HAL_COMMAND config ci jenkins master add master --address http://jenkins-service.{{ .Release.Namespace }}.svc.cluster.local:8080 --username $USERNAME --password
          $HAL_COMMAND config features edit --pipeline-templates true
  ingress:
    enabled: true
    host: spinnaker
    annotations:
      ingress.kubernetes.io/ssl-redirect: 'true'
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    tls:
      - secretName: '-tls'
        hosts:
          - domain.com
  ingressGate:
    enabled: true
    host: gate.spinnaker
    annotations:
      ingress.kubernetes.io/ssl-redirect: 'true'
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    tls:
     - secretName: -tls
       hosts:
         - domain.com

kibana:
  nameOverride: "wso2is-kibana"
  elasticsearchHosts: "http://wso2-elasticsearch-master:9200"
  ingress:
    enabled: true
    hosts:
      - kibana
    tls:
      - hosts:
          - kibana
          
elasticsearch:
  minimumMasterNodes: 1
  replicas: 1
  imageTag: 7.3.0
  clusterName: wso2-elasticsearch
  persistence:
    enabled: false
  esJavaOpts: -Xms512m -Xmx512m

prometheus-operator:
  # remove parent chart name from this one
  fullnameOverride: prometheus-operator
  fullname: prometheus-operator
  # Kube-scheduler on gke
  kubeScheduler:
    enabled: false

  # Controller Manager on gke
  kubeControllerManager:
    enabled: false

  # kubeDNS instead of coreDns on gke
  kubeDns:
    enabled: true
  coreDns:
    enabled: false

  # etcd on gke
  kubeEtcd:
    enabled: false

  grafana:
    adminPassword: "password"
    ingress:
      enabled: true
      annotations: 
        kubernetes.io/ingress.class: nginx
      hosts:
        - grafana

  defaultRules:
    create: true
    rules:
      alertmanager: false
      etcd: false
      general: false
      k8s: false
      kubeApiserver: false
      kubePrometheusNodeAlerting: false
      kubePrometheusNodeRecording: false
      kubernetesAbsent: false
      kubernetesApps: false
      kubernetesResources: false
      kubernetesStorage: false
      kubernetesSystem: false
      kubeScheduler: false
      network: false
      node: false
      prometheus: false
      prometheusOperator: false
      time: false

    ## Labels for default rules
    labels: 
      app: helm
    ## Annotations for default rules
    annotations: {}

  prometheus-node-exporter:
    service:
      port: 30206
      targetPort: 30206
    kubeEtcd: # Disable Etcd metrics
      enabled: false
    kubeControllerManager: #Disble KubeController Metrics
      enabled: false
    kubeScheduler: # Disable Scheduler metrics
      enabled: false
    alertmanager:
      enabled: false
    kubeApiServer:
      enabled: false
    coreDns:
      enabled: false
    kubeProxy:
      enabeld: false
    nodeExporter:
      enabled: false
